from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils import safe_edit_message

router = Router()

main_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º", callback_data="services")],
        [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã –∏ –∫–µ–π—Å—ã", callback_data="tariffs_cases")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="application")],
        [InlineKeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact")]
    ]
)

services_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîπ –ë–æ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂", callback_data="service_sales")],
        [InlineKeyboardButton(text="üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="service_support")],
        [InlineKeyboardButton(text="üîπ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è HR –∏ –æ–±—É—á–µ–Ω–∏—è", callback_data="service_hr")],
        [InlineKeyboardButton(text="üîπ –ò–≥—Ä–æ–≤—ã–µ –±–æ—Ç—ã (–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è)", callback_data="service_gamification")],
        [InlineKeyboardButton(text="üîπ AI-–±–æ—Ç—ã (ChatGPT API, Dialogflow)", callback_data="service_ai")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)


@router.callback_query(F.data == "services")
async def show_services(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "service_sales")
async def service_sales_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="üîπ *–ë–æ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂*\n\n–ú—ã —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç –≤–æ—Ä–æ–Ω–∫–∏ –∏ –¥–µ–ª–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ 24/7.",
        parse_mode="Markdown",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "service_support")
async def service_support_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="üîπ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n–ë–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ä–µ—à–∞—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —ç–∫–æ–Ω–æ–º—è—Ç –≤—Ä–µ–º—è –≤–∞—à–µ–π —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        parse_mode="Markdown",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "service_hr")
async def service_hr_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="üîπ *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è HR –∏ –æ–±—É—á–µ–Ω–∏—è*\n\n–ë–æ—Ç—ã –¥–ª—è —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞, –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ –∏ –æ–ø—Ä–æ—Å–æ–≤.",
        parse_mode="Markdown",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "service_gamification")
async def service_gamification_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="üîπ *–ò–≥—Ä–æ–≤—ã–µ –±–æ—Ç—ã (–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è)*\n\n–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
        parse_mode="Markdown",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "service_ai")
async def service_ai_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="üîπ *AI-–±–æ—Ç—ã (ChatGPT API, Dialogflow)*\n\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI-–º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.",
        parse_mode="Markdown",
        reply_markup=services_kb
    )
    await query.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(query: CallbackQuery):
    await safe_edit_message(
        query.message,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb
    )
    await query.answer()
